type User {
  comments: [Comment!]! @hasMany(type: "connection")
  email: String!
  events: [Event!]! @belongsToMany(type: "connection")
  firstName: String! @rename(attribute: "first_name")
  id: ID! @globalId
  isAdmin: Boolean! @rename(attribute: "is_admin")
  lastName: String @rename(attribute: "last_name")
  name: String
  password: String!
  stars: [Star!]! @hasMany(type: "connection")
}

extend type Query {
  user(id: ID! @eq): User @find(model: "App\\Models\\User")
  users: [User!]! @field(resolver: "App\\GraphQL\\Queries\\UserQuery@resolve")
}

input CreateUser {
  email: String!
  firstName: String! @rules(apply: ["required","min:5"])
  lastName: String!  @rules(apply: ["required","min:5"])
  password: String!  @rules(apply: ["required","min:5"])
}

input DeleteUser {
  id: ID!
}

input adminUsers {
  id: ID!
}

extend type Mutation {
  createUser(input: CreateUser!): User
  @field(
      resolver: "App\\GraphQL\\Mutations\\User\\Create@resolve"
  )
  deleteUser(input: DeleteUser!): User
  @field(
      resolver: "App\\GraphQL\\Mutations\\User\\Delete@resolve"
  )
  adminUsers(input: adminUsers!): User
  @field(
      resolver: "App\\GraphQL\\Mutations\\User\\UserAdmin@resolve"
  )
}

