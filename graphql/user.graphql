type User {
  comments: [Comment!]! @hasMany(type: "connection")
  email: String!
  events: [Event!]! @belongsToMany(type: "connection")
  firstName: String! @rename(attribute: "first_name")
  id: ID! @globalId
  isAdmin: Boolean! @rename(attribute: "is_admin")
  lastName: String! @rename(attribute: "last_name")
  name: String!
  stars: [Star!]! @hasMany(type: "connection")
}

extend type Query {
  user(id: ID! @eq): User @find(model: "App\\Models\\User")
  users: [User!]! @field(resolver: "App\\GraphQL\\Queries\\UserQuery@resolve")
}

input LoginUser {
  email: String!
  password: String!
}

input CreateUser {
  email: String! @rules(apply: ["bail", "email", "unique:users,email", "regex:/getnerdify\\.com$/"], messages: {
    regex: "You need a Nerdify email address."
  })
  firstName: String!
  lastName: String!
  password: String!
}

extend type Mutation {
  createUser(input: CreateUser!): User
    @field(resolver: "App\\GraphQL\\Mutations\\User\\Create@resolve")
}

extend type Mutation @group(middleware: ["auth", "admin"]) {
  createAdmin(id: ID!): User
    @field(resolver: "App\\GraphQL\\Mutations\\User\\CreateAdmin@resolve")

  deleteUser(id: ID!): User
    @delete(globalId: true)
}
extend type Mutation {
  loginUser(input: LoginUser!): User
    @field(resolver: "App\\GraphQL\\Mutations\\User\\Login@resolve")
}
